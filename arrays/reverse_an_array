//method-1 using a extra arrays i.e., two arrays 
#include <iostream>
using namespace std;
void revarr(int arr[], int n){ //arr is org arr,revarr is extra arr
  int arrrev[n];
  for(int i=0;i<n;i++){
    arrrev[i]=arr[n-i-1];
  }
  for(int i=0;i<n;i++){
    cout<<arrrev[i]<<" ";
  }
}
int main() {
  int orgarr[]={1,2,3,4,5};
int n=sizeof(orgarr)/sizeof(orgarr[0]);
  revarr(orgarr,n);
}

//method -2 using a for loop

#include<iostream>
using namespace std;
void rev_arr(int arr[],int start, int end){
  while(start<end){
    int temp=arr[start];
    arr[start]=arr[end];
    arr[end]=temp;
    start++;
    end--;
  }
}
void printarr(int arr[],int size){
  for(int i=0;i<size;i++)
    cout<<arr[i]<<" ";
    cout<<endl;
}
int main(){
  int arr[]={1,2,3,4,5};
  int n=sizeof(arr)/sizeof(arr[0]);
  printarr(arr,n);
  rev_arr(arr,0,n-1);
  printarr(arr, n);
  return 0;
}


// reverse an array using <algorithm> 
#include<iostream>
#include<algorithm>
using namespace std;
    
int main(){
    int arr[]={1,2,3,4,5};
    int len=sizeof(arr)/sizeof(arr[0]);
    reverse(arr,arr+len);
    for(int i=0;i<len;i++){
        cout<<arr[i]<<" ";
    }
return 0;
}

//using stack

#include <iostream>
#include <stack>
#include <vector>
using namespace std;
void reverseArrayUsingStack(int arr[], int size) {
	stack<int> stack;

	// Push elements onto the stack
	for (int i = 0; i < size; i++) {
		stack.push(arr[i]);
	}
  
	// Pop elements from the stack to reverse the array
	for (int i = 0; i < size; i++) {
		arr[i] = stack.top();
		stack.pop();
	}
}

int main() {
	int arr[] = {1, 2, 3, 4, 5};
	int size = sizeof(arr) / sizeof(arr[0]);

	reverseArrayUsingStack(arr, size);

	cout << "Reversed Array: ";
	for (int i = 0; i < size; i++) {
		cout << arr[i] << " ";
	}

	return 0;
}
