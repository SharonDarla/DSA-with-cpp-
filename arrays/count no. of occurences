// using linear search ; T.C = O(n)
#include <stdio.h>

// Returns number of times x occurs in arr[0..n-1]
int countOccurrences(int arr[], int n, int x)
{
	int res = 0;
	for (int i = 0; i < n; i++)
		if (x == arr[i])
			res++;
	return res;
}

int main()
{
	//int arr[] = {1, 2, 2, 2, 2, 3, 4, 7, 8, 8};
	//int n = sizeof(arr) / sizeof(arr[0]);
	//int x = 2;
	//printf("%d", countOccurrences(arr, n, x));

//this piece of code is to dynamically take values from user

int n;
    cout<<"enter the size of array"<<endl;
    cin>>n;
    int arr[n];
    cout<<"enter elements in the array"<<endl;
    for(int i=0;i<n;i++){ //note in for loop (i) shd be stricly (< n) not <=n bcz it bcms out of bound and takes more values.
        cin>>arr[i];
    }
    int x;
    cout<<"enter the element to count it: ";
    cin>>x;
    printf("%d",count(arr,n,x));
    return 0;

}
==========================================================================================================
//using binary search : for this problem not necessary to implement
// C++ program to count occurrences of an element in a sorted array.
# include <bits/stdc++.h>
using namespace std;

/* if x is present in arr[] then returns the count of occurrences of x, otherwise returns 0. */
int count(int arr[], int x, int n)
{ 
/* get the index of first occurrence of x */
int *low = lower_bound(arr, arr+n, x);

// If element is not present, return 0
if (low == (arr + n) || *low != x)
	return 0;
	
/* Else get the index of last occurrence of x.
	Note that we are only looking in the subarray after first occurrence */
int *high = upper_bound(low, arr+n, x);	 
	
/* return count */
return high - low;
}

int main()
{
int arr[] = {1, 2, 2, 3, 3, 3, 3};
int x = 3; // Element to be counted in arr[]
int n = sizeof(arr)/sizeof(arr[0]);
int c = count(arr, x, n);
printf(" %d occurs %d times ", x, c);
return 0;
}
========================================================================================================

// using Hashing
#include <bits/stdc++.h>
using namespace std;

// Function to count occurrences
int countOccurrences(int arr[], int x, int N)
{
	unordered_map<int, int> mp;
	for (int i = 0; i < N; i++) {
		mp[arr[i]]++;
	}
	if (mp.find(x) == mp.end())
		return 0;
	auto it = mp.find(x);
	return it->second;
}

int main()
{
	int arr[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 };
	int x = 2;
	int N = sizeof(arr) / sizeof(arr[0]);

	// displaying the frequency of x in Array
	cout << x << " occurs " << countOccurrences(arr, x, N) << " times";
	return 0;
}

===============================================================================================================

// using stl 

#include <iostream>
#include <vector>
using namespace std;

int search(vector<int>& nums, int target, bool findStartIndex)
{
	int answer = -1;
	int start = 0;
	int end = nums.size() - 1;
	while (start <= end) {
		int mid = start + (end - start) / 2;
		if (target < nums[mid]) {
			end = mid - 1;
		}
		else if (target > nums[mid]) {
			start = mid + 1;
		}
		else {
			answer = mid;
			if (findStartIndex) {
				end = mid - 1;
			}
			else {
				start = mid + 1;
			}
		}
	}
	return answer;
}

int countOccurrences(vector<int>& nums, int x)
{
	int firstIndex = search(nums, x, true);
	int lastIndex = search(nums, x, false);
	if (firstIndex != -1 && lastIndex != -1)
		return lastIndex - firstIndex + 1;
	else
		return 0;
}

int main()
{
	vector<int> arr{ 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 };
	int x = 2;
	int c = countOccurrences(arr, x);
	cout << x << " occurs " << c << " times" << endl;
	return 0;
}


  
