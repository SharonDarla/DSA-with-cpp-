Que:
Given a 2D square matrix, print the matrix in a spiral order. Refer to examples for more details. From an interview's point of view, after you scan the matrix in a 2D array, try to print the matrix in a spiral order without using any extra space.

Input Format
The first line of input contains T - the number of test cases. The first line of each test case contains N - the size of the matrix [NxN]. It is followed by N lines each containing N integers - matrix elements.

Output Format
For each test case, print the matrix in a spiral order, separated by newline.

Constraints
1 <= T <= 100
1 <= N <= 100
-100 <= ar[i][j] <= 100

Example
Input
4
1
1
2
1 2
4 3
3
1 2 3
8 9 4
7 6 5
5
-44 25 -52 69 -5
17 22 51 27 -44
-79 28 -78 1 -47
65 -77 -14 -21 -6
-96 43 -21 -20 90

Output
1
1 2 3 4
1 2 3 4 5 6 7 8 9
-44 25 -52 69 -5 -44 -47 -6 90 -20 -21 43 -96 65 -79 17 22 51 27 1 -21 -14 -77 28 -78
=======================================================================================================================================================
Sol :

Concept : We have a square matrix, and we need to print its elements in a spiral order. That means starting from the top-left corner, we go across the top row, then down the last column, then across the bottom row, and so on, spiraling inward until we print all the elements.

//code :

#include <iostream>
using namespace std;

int main() {
    int T;
    cin >> T; // Number of test cases

    while (T--) {
        int N;
        cin >> N; // Size of the NxN matrix
        int matrix[100][100]; // Declare matrix of maximum size 100x100

        // Reading the matrix elements
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                cin >> matrix[i][j];
            }
        }

        // Spiral traversal variables
        int top = 0, bottom = N - 1, left = 0, right = N - 1;

        // Traverse the matrix in spiral order
        while (top <= bottom && left <= right) {
            // Traverse from left to right along the top row
            for (int i = left; i <= right; i++) {
                cout << matrix[top][i] << " ";
            }
            top++; // Move top boundary down

            // Traverse from top to bottom along the right column
            for (int i = top; i <= bottom; i++) {
                cout << matrix[i][right] << " ";
            }
            right--; // Move right boundary left

            // Traverse from right to left along the bottom row
            if (top <= bottom) {
                for (int i = right; i >= left; i--) {
                    cout << matrix[bottom][i] << " ";
                }
                bottom--; // Move bottom boundary up
            }

            // Traverse from bottom to top along the left column
            if (left <= right) {
                for (int i = bottom; i >= top; i--) {
                    cout << matrix[i][left] << " ";
                }
                left++; // Move left boundary right
            }
        }

        cout << endl; // Print a new line after each test case
    }

    return 0;
}

===========================================================================================================================================================
explaination:

7. Spiral Traversal Variables:
cpp
Copy code
        int top = 0, bottom = N - 1, left = 0, right = N - 1;
These variables define the boundaries of the part of the matrix that we haven't printed yet:
top: The topmost row that hasn't been printed.
bottom: The bottommost row that hasn't been printed.
left: The leftmost column that hasn't been printed.
right: The rightmost column that hasn't been printed.
Initially, top = 0 (the first row), bottom = N-1 (the last row), left = 0 (the first column), and right = N-1 (the last column).

8. Spiral Traversal Logic:
cpp
Copy code
        while (top <= bottom && left <= right) {
We keep printing the matrix in a spiral order as long as there are rows and columns left to process.
8.1 Left to Right (Top Row):
cpp
Copy code
            for (int i = left; i <= right; i++) {
                cout << matrix[top][i] << " ";
            }
            top++;
We print the topmost row from the left boundary to the right boundary.
After printing the top row, we move the top boundary down by doing top++, which means the next time we won't consider this row.
8.2 Top to Bottom (Right Column):
cpp
Copy code
            for (int i = top; i <= bottom; i++) {
                cout << matrix[i][right] << " ";
            }
            right--;
We print the rightmost column from the top boundary to the bottom boundary.
After printing the right column, we move the right boundary left by doing right--, so the next time we won't consider this column.
8.3 Right to Left (Bottom Row):
cpp
Copy code
            if (top <= bottom) {
                for (int i = right; i >= left; i--) {
                    cout << matrix[bottom][i] << " ";
                }
                bottom--;
            }
If there are rows left, we print the bottommost row from the right boundary to the left boundary.
After printing the bottom row, we move the bottom boundary up by doing bottom--.
8.4 Bottom to Top (Left Column):
cpp
Copy code
            if (left <= right) {
                for (int i = bottom; i >= top; i--) {
                    cout << matrix[i][left] << " ";
                }
                left++;
            }
If there are columns left, we print the leftmost column from the bottom boundary to the top boundary.
After printing the left column, we move the left boundary right by doing left++.
9. New Line After Each Test Case:
cpp
Copy code
        cout << endl; // Print a new line after each test case
After printing all the elements of the matrix in spiral order, we print a new line to separate the output for different test cases.
10. End of Main Function:
cpp
Copy code
    return 0;
}
The return 0; statement indicates that the program has successfully finished execution.
Example:
Input:

Copy code
2
3
1 2 3
4 5 6
7 8 9
4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
Explanation:

For the first test case (3x3 matrix):

Top row: 1 2 3
Right column: 6 9
Bottom row (right to left): 8 7
Left column (bottom to top): 4
Inner element: 5
Output: 1 2 3 6 9 8 7 4 5

For the second test case (4x4 matrix):

Top row: 1 2 3 4
Right column: 8 12 16
Bottom row (right to left): 15 14 13
Left column (bottom to top): 9 5
Inner elements: 6 7 11 10
Output: 1 2 3 4 8 12 16 15 14 13 9 5 6 7 11 10

Final Thoughts:
This code efficiently prints the matrix in a spiral order, adjusting the boundaries as it goes.
The concept of boundaries (top, bottom, left, right) is key to understanding the spiral traversal.
