// C++ program to search an element in row-wise and column-wise sorted matrix
#include <bits/stdc++.h>

using namespace std;

/* Searches the element x in mat[][]. If the element is found, then prints its position and returns true, otherwise prints "not found" and returns false */
int search(int mat[4][4], int n, int x)
{
	if (n == 0)
		return -1;

	// traverse through the matrix
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++)
			// if the element is found
			if (mat[i][j] == x) {
				cout << "Element found at (" << i << ", "
					<< j << ")\n";
				return 1;
			}
	}

	cout << "n Element not found";
	return 0;
}

int main()
{
	int mat[4][4] = { { 10, 20, 30, 40 },
					{ 15, 25, 35, 45 },
					{ 27, 29, 37, 48 },
					{ 32, 33, 39, 50 } };

	// Function call
	search(mat, 4, 29);

	return 0;
}
===========================================================================================================================

// C++ program to search an element in row-wise and column-wise sorted matrix
#include <bits/stdc++.h>
using namespace std;

/* Searches the element x in mat[][]. If the element is found, then prints its position and returns true, otherwise prints "not found" and returns false */
int search(int mat[4][4], int n, int x)
{
	if (n == 0)
		return -1;

	int smallest = mat[0][0], largest = mat[n - 1][n - 1];
	if (x < smallest || x > largest)
		return -1;

	// set indexes for top right element
	int i = 0, j = n - 1;
	while (i < n && j >= 0) {
		if (mat[i][j] == x) {
			cout << "Element found at " << i << ", " << j;
			return 1;
		}
		if (mat[i][j] > x)
			j--;

		// Check if mat[i][j] < x
		else
			i++;
	}

	cout << "n Element not found";
	return 0;
}

int main()
{
	int mat[4][4] = { { 10, 20, 30, 40 },
					{ 15, 25, 35, 45 },
					{ 27, 29, 37, 48 },
					{ 32, 33, 39, 50 } };

	// Function call
	search(mat, 4, 29);

	return 0;
}
==================================================================================================================================================================
// my method
#include<bits/stdc++.h>
#define r 4
#define c 4
using namespace std;
int search(int arr[r][c], int n, int x){
    if (n==0)
        return -1;
    for(int i=0;i<r;i++){
        for(int j=0;j<c;j++)
            if(arr[i][j] == x)
                cout<<"("<< i <<","<< j<<")";
        cout<<endl;
    }
}
int main()
    {
    int arr[4][4] = { { 10, 20, 30, 40 },
                      { 15, 25, 35, 45 },
                      { 27, 29, 37, 48 },
                      { 32, 33, 39, 50 } };

    search(arr, 4, 29);
 
return 0;
}
==============================================================================================================================================================
//using binary search
#include <iostream>

using namespace std;

pair<int, int> findPosition(int matrix[][3], int n, int x) {   //pait int template to accept two parameters
    int row = 0, col = n - 1; // Start from the top-right corner

    while (row < n && col >= 0) {
        if (matrix[row][col] == x) {
            return {row, col}; // Found x
        } else if (matrix[row][col] < x) {
            row++; // Move down
        } else {
            col--; // Move left
        }
    }

    // If element not found
    return {-1, -1};
}

int main() {
    // Example usage
    int matrix[][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    int n = 3;
    int x = 5;
    pair<int, int> position = findPosition(matrix, n, x);

    if (position.first != -1 && position.second != -1) {
        cout << "Element found at position: (" << position.first << ", " << position.second << ")\n";
    } else {
        cout << "Element not found\n";
    }

    return 0;
}
===============================================
#in python
def find_position(matrix, x):
    n = len(matrix)
    row, col = 0, len(matrix[0]) - 1  # Start from the top-right corner

    while row < n and col >= 0:
        if matrix[row][col] == x:
            return row, col  # Found x
        elif matrix[row][col] < x:
            row += 1  # Move down
        else:
            col -= 1  # Move left

    # If element not found
    return -1, -1

# Example usage
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
]
x = 5
row, col = find_position(matrix, x)

if row != -1 and col != -1:
    print(f"Element found at position: ({row}, {col})")
else:
    print("Element not found")
