//Search element in a grid
#include <bits/stdc++.h> 
using namespace std; 

bool searchInMatrix(vector<vector<int> >& arr, int x) 
{ 
	int m = arr.size(), n = arr[0].size(); 

	for (int i = 0; i < m; i++) { 
		for (int j = 0; j < n; j++) { 
			if (arr[i][j] == x) 
				return true; 
		} 
	} 
	return false; 
} 

int main() 
{ 
	int x = 8; 
	vector<vector<int> > arr 
		= { { 0, 6, 8, 9, 11 }, 
			{ 20, 22, 28, 29, 31 }, 
			{ 36, 38, 50, 61, 63 }, 
			{ 64, 66, 100, 122, 128 } }; 

	if (searchInMatrix(arr, x)) 
		cout << "YES" << endl; 
	else
		cout << "NO" << endl; 

	return 0; 
}
=-=-=-=-====================================================================------=----------==================--------------==============================-------------

//print prinicipal and secondary diagonal elements of a matrix

// C++ Program to print the Diagonals of a Matrix 

#include <bits/stdc++.h> 
using namespace std; 

const int MAX = 100; 

// Function to print the Principal Diagonal 
void printPrincipalDiagonal(int mat[][MAX], int n) 
{ 
	cout << "Principal Diagonal: "; 

	for (int i = 0; i < n; i++) { 
		for (int j = 0; j < n; j++) { 

			// Condition for principal diagonal 
			if (i == j) 
				cout << mat[i][j] << ", "; 
		} 
	} 
	cout << endl; 
} 

// Function to print the Secondary Diagonal 
void printSecondaryDiagonal(int mat[][MAX], int n) 
{ 
	cout << "Secondary Diagonal: "; 

	for (int i = 0; i < n; i++) { 
		for (int j = 0; j < n; j++) { 

			// Condition for secondary diagonal 
			if ((i + j) == (n - 1)) 
				cout << mat[i][j] << ", "; 
		} 
	} 
	cout << endl; 
} 

int main() 
{ 
	int n = 4; 
	int a[][MAX] = { { 1, 2, 3, 4 }, 
					{ 5, 6, 7, 8 }, 
					{ 1, 2, 3, 4 }, 
					{ 5, 6, 7, 8 } }; 

	printPrincipalDiagonal(a, n); 
	printSecondaryDiagonal(a, n); 
	return 0; 
}
================================================================================================================================================================
//sorting ele in matrix
// C++ implementation to sort the given matrix 
#include <bits/stdc++.h> 
using namespace std; 
#define SIZE 10 

// function to sort the given matrix 
void sortMat(int mat[SIZE][SIZE], int n) 
{ 
	// temporary matrix of size n^2 
	int temp[n * n];   //double the size i.e., 2 times the size of orginal n*n= n^2
	int k = 0; 

	// copy the elements of matrix one by one  into temp[] 
	for (int i = 0; i < n; i++) 
		for (int j = 0; j < n; j++) 
			temp[k++] = mat[i][j]; 

	// sort temp[] 
	sort(temp, temp + k); // sort contains in #include <algorithm>

	// copy the elements of temp[] one by one in mat[][] 
	k = 0; 
	for (int i = 0; i < n; i++) 
		for (int j = 0; j < n; j++) 
			mat[i][j] = temp[k++]; 
} 

// function to print the given matrix 
void printMat(int mat[SIZE][SIZE], int n) 
{ 
	for (int i = 0; i < n; i++) { 
		for (int j = 0; j < n; j++) 
			cout << mat[i][j] << " "; 
		cout << endl; 
	} 
} 

int main() 
{ 
	int mat[SIZE][SIZE] 
		= { { 5, 4, 7 }, { 1, 3, 8 }, { 2, 9, 6 } }; 
	int n = 3; 

	cout << "Original Matrix:\n"; 
	printMat(mat, n); 

	sortMat(mat, n); 

	cout << "\nMatrix After Sorting:\n"; 
	printMat(mat, n); 

	return 0; 
}
=================================================================================================================================================================

// rotate i.e., reverse the elements of array through 180 degrees
// C++ program for left rotation of matrix by 180 
#include <bits/stdc++.h> 
using namespace std; 

#define R 4 
#define C 4 

// Function to rotate the matrix by 180 degree 
void reverseColumns(int arr[R][C]) 
{ 
	for (int i = 0; i < C; i++) 
		for (int j = 0, k = C - 1; j < k; j++, k--) 
			swap(arr[j][i], arr[k][i]); 
} 
// Function for transpose of matrix 
void transpose(int arr[R][C]) 
{ 
	for (int i = 0; i < R; i++) 
		for (int j = i; j < C; j++) 
			swap(arr[i][j], arr[j][i]); 
} 

// Function for display the matrix 
void printMatrix(int arr[R][C]) 
{ 
	for (int i = 0; i < R; i++) { 
		for (int j = 0; j < C; j++) 
			cout << arr[i][j] << " "; 
		cout << '\n'; 
	} 
} 

// Function to anticlockwise rotate matrix by 180 degree 
void rotate180(int arr[R][C]) 
{ 
	transpose(arr); 
	reverseColumns(arr); 
	transpose(arr); 
	reverseColumns(arr); 
} 

int main() 
{ 
	int arr[R][C] = { { 1, 2, 3, 4 }, 
					{ 5, 6, 7, 8 }, 
					{ 9, 10, 11, 12 }, 
					{ 13, 14, 15, 16 } }; 
	rotate180(arr); 
	printMatrix(arr); 
	return 0; 
}
